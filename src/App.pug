script.
    import U from "./Util.js"
    import LockDropDown from "./LockDropDown.pug"

    let isLoading = true
    let listItems = []
    let label
    let locked

    const rawData = U.ServiceUtil.loadData()
    rawData.then((data) => {
        MHX.plotCategories.forEach((el) => {
            for(let i=0; i<data.values.length; i++) {
                if(i>=MHX.dataRowStartIdx && data.values[i][el.columnIdx])
                    el.items.push(data.values[i][el.columnIdx])
            }
            el.selectedValue = el.items[0]
            el.items = el.items
        })

        isLoading = false

        console.log(MHX.plotCategories)
        MHX.plotCategories = MHX.plotCategories
        PubSub.publish("Data.changed")
    })

    const onLockChange = (e) => {
        let checked = !!e.target.checked
        let charType = e.target.dataset.nameFor

        for(let i=0; i<MHX.plotCategories.length;i++) {
            let el = MHX.plotCategories[i]

            if(el.name.toLowerCase() == charType.toLowerCase()) {
                el.locked = checked
                break
            }
        }
    }

    const getCategories = () => MHX.plotCategories

    const shuffleData = () => {
        MHX.plotCategories.forEach((el) => {
            if(!el.locked) el.items = U.ArrayUtil.shuffle(el.items)
        })

        PubSub.publish("Data.changed")
    }

    $: plotCategories = getCategories()


span.loading("class"="{isLoading?'':'off'}") Loading ...  

main
    h1 Character Aid

    button(on:click="{shuffleData}") Generate

    div.category-wrapper
        {#each plotCategories as category}
          LockDropDown( 
            name="{category.name}"
            label="{category.label}"
            bind:listItems="{category.items}"
            locked="{category.locked}"
            {onLockChange}
        )

    footer Made with &#9829; by 
        a(href="https://IMstandup.com") IMstandup.com

style.
    :global(.loading) {
        position: absolute;
        background-color: red;
        top: 0;
        left: 0;
        width: 100%;
        color: white;
        font-weight: bolder;
        padding: 10px;
        text-align: center;
    }

    :global(.loading.off) {
        display: none;
    }

    main {
        text-align: center;
        padding: 1em;
        margin: 0 auto;
    }

    .printable {
        margin: 20px;
    }

    h1 {
        color: #ff3e00;
        text-transform: uppercase;
        font-size: 4em;
        font-weight: 100;
    }

    footer {
        margin-top: 20px;
        font-size: x-small;
        color: #333;
    }

    .category-wrapper {
        display: flex;
        flex-wrap: wrap;
    }

    @media (min-width: 640px) {
        main {
            max-width: none;
        }
    }
